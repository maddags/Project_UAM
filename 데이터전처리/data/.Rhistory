#install.packages(c("readxl","writexl","dplyr","Imap","stringr"))
library(readxl)
library(writexl)
library(dplyr)
library(dplyr)
library(Imap)
# 읍면동 중심위치와 가까운 터미널 거리 구하기
terminal <- read_excel(sprintf("%s/터미널_위키.xlsx",path))
# 읍면동 중심위치와 가까운 터미널 거리 구하기
terminal <- read_excel(sprintf("%s/터미널_위키.xlsx",path))
path = "C:/Users/madda/Desktop/데이터전처리/data"
# 읍면동 중심위치와 가까운 터미널 거리 구하기
terminal <- read_excel(sprintf("%s/터미널_위키.xlsx",path))
# 읍면동 중심위치와 가까운 터미널 거리 구하기
terminal <- read_excel(sprintf("%s/터미널_위키.xlsx",path))
# 파일을 다시 읽습니다.
copy2_relation_data <- read_excel(sprintf("%s/copy2_relation_data.xlsx",path))
# copy2_relation_data, trans_copy 합치기
join_data <- left_join(copy2_relation_data,trans_copy, by ="행정주소")
# 교통혼잡,인구수 데이터 변수 추가
trans <- read_excel(sprintf("%s/교통관련데이터.xlsx",path)) %>% as.data.frame()
# 사용할 칼럼 추출
trans_copy <- trans[,-c(7,9,10)]
trans_copy$행정주소 <- paste(trans_copy$`도/광역시/시`,trans_copy$시군구,trans_copy$읍면동,rep = " ")
trans_copy <- trans_copy[,-c(1,2,3)]
trans_copy <- trans_copy[,c(5,1:4)]
# 행정주소, 법정주소 연결시키기
relation_data <- read_excel(sprintf("%s/행정법정동코드 연계자료.xlsx",path))
# copy2_relation_data, trans_copy 합치기
join_data <- left_join(copy2_relation_data,trans_copy, by ="행정주소")
# 행정주소 겹친거 제거하기
first_data$id <- c(1:length(first_data$EMD_CD))
# 필요한 칼럼만 추출 및 가공
first_data <- join_data[,c(8:14)]
# 행정주소 겹친거 제거하기
first_data$id <- c(1:length(first_data$EMD_CD))
eraser_rep_data <- first_data[duplicated(first_data$행정주소),]
# 데이터 확인
str(eraser_rep_data)
no_rep_data <- first_data[!(first_data$id %in% eraser_rep_data$id),]
# 데이터 확인
str(no_rep_data)
# 관측 안된 값 제거하기
na_data <- no_rep_data[is.na(no_rep_data$승용차),]
# 데이터 확인
str(na_data)
second_data <- no_rep_data[!(no_rep_data$id %in% na_data$id),]
# 데이터 확인
str(second_data)
# 좌표 데이터 추가하기
location <- read.csv(sprintf("%s/center_location.csv",path))
# 데이터 확인
str(location)
location <- as.data.frame(location)
location <- location[,-1]
colnames(location) <- c("LON","LAT")
location <- location[,c(2,1)]
# 데이터 확인
str(location)
join_data_2 <- data.frame(second_data,location)
second_data <- no_rep_data[!(no_rep_data$id %in% na_data$id),]
join_data_2 <- data.frame(second_data,location)
# 데이터 확인
str(join_data_2)
```{r echo = T}
#install.packages(c("readxl","writexl","dplyr","Imap","stringr"))
library(readxl)
library(writexl)
library(dplyr)
library(Imap)
library(stringr)
path = "C:/Users/madda/Desktop/데이터전처리/data"
# 교통혼잡,인구수 데이터 변수 추가
trans <- read_excel(sprintf("%s/교통관련데이터.xlsx",path)) %>% as.data.frame()
str(trans) # 데이터셋 확인
# 사용할 칼럼 추출
trans_copy <- trans[,-c(7,9,10)]
trans_copy$행정주소 <- paste(trans_copy$`도/광역시/시`,trans_copy$시군구,trans_copy$읍면동,rep = " ")
trans_copy <- trans_copy[,-c(1,2,3)]
trans_copy <- trans_copy[,c(5,1:4)]
# 데이터 확인
str(trans_copy)
# 결측값 확인
trans_copy[is.na(trans_copy),]
# 행정주소, 법정주소 연결시키기
relation_data <- read_excel(sprintf("%s/행정법정동코드 연계자료.xlsx",path))
# 데이터셋 확인
str(relation_data)
# 사용할 칼럼 추출 및 가공
copy_relation_data <- relation_data[,-c(8,10,11,12)]
colnames(copy_relation_data) <- copy_relation_data[1,]
copy_relation_data <- copy_relation_data[-1,]
# 데이터 확인
str(copy_relation_data)
## 읍면동 데이터만 남기기
si_data_list <- grep("시$",copy_relation_data$법정동, value = 1)
gu_data_list <- grep("구$",copy_relation_data$법정동, value = 1)
gun_data_list <- grep("군$",copy_relation_data$법정동, value = 1)
ri_data_list <- grep("리$",copy_relation_data$법정동, value = 1)
do_data_list <- grep("도$",copy_relation_data$법정동, value = 1)
copy_relation_data <- copy_relation_data[!(copy_relation_data$법정동 %in% gu_data_list),]
copy_relation_data <- copy_relation_data[!(copy_relation_data$법정동 %in% gun_data_list),]
copy_relation_data <- copy_relation_data[!(copy_relation_data$법정동 %in% si_data_list),]
copy_relation_data <- copy_relation_data[!(copy_relation_data$법정동 %in% ri_data_list),]
copy_relation_data <- copy_relation_data[!(copy_relation_data$법정동 %in% do_data_list),]
copy_relation_data$법정동코드 <- floor(as.numeric(copy_relation_data$법정동코드)/100)
copy_relation_data$행정주소 <- paste(copy_relation_data$시도,copy_relation_data$시군구,
copy_relation_data$행정구역명, rep ="")
copy_relation_data$법정동명 <- paste(copy_relation_data$시도,copy_relation_data$시군구,
copy_relation_data$법정동, rep ="")
names(copy_relation_data)[8] <- "EMD_CD"
# 데이터 확인
str(copy_relation_data)
# copy_relation_data 결측값 수정 및 제거
copy_relation_data$행정구역코드[copy_relation_data$법정동 == "신수동" & copy_relation_data$시군구 == "사천시"] <- 0
copy2_relation_data <- na.omit(copy_relation_data) %>% as.data.frame()
# 결측값 개수 확인
sum(is.na(copy2_relation_data))
# 데이터 확인
str(copy2_relation_data)
# 파일을 저장
write_xlsx(copy2_relation_data,"copy2_relation_data.xlsx")
# trans_copy, copy2_relation_data 합치기
str(trans_copy$행정주소)
# 우측 공백 제거
trans_copy$행정주소 <- str_trim(trans_copy$행정주소, side = "right")
# 우측 공백 제거 확인
head(trans_copy$행정주소)
# 파일을 다시 읽습니다.
copy2_relation_data <- read_excel(sprintf("%s/copy2_relation_data.xlsx",path))
# copy2_relation_data, trans_copy 합치기
join_data <- left_join(copy2_relation_data,trans_copy, by ="행정주소")
# 필요한 칼럼만 추출 및 가공
first_data <- join_data[,c(8:14)]
names(first_data)[3] <- "법정동주소"
# 데이터셋 확인
str(first_data)
# 행정주소 겹친거 제거하기
first_data$id <- c(1:length(first_data$EMD_CD))
eraser_rep_data <- first_data[duplicated(first_data$행정주소),]
# 데이터 확인
str(eraser_rep_data)
no_rep_data <- first_data[!(first_data$id %in% eraser_rep_data$id),]
# 데이터 확인
str(no_rep_data)
# 관측 안된 값 제거하기
na_data <- no_rep_data[is.na(no_rep_data$승용차),]
# 데이터 확인
str(na_data)
second_data <- no_rep_data[!(no_rep_data$id %in% na_data$id),]
# 데이터 확인
str(second_data)
# 좌표 데이터 추가하기
location <- read.csv(sprintf("%s/center_location.csv",path))
# 데이터 확인
str(location)
location <- as.data.frame(location)
location <- location[,-1]
colnames(location) <- c("LON","LAT")
location <- location[,c(2,1)]
# 데이터 확인
str(location)
join_data_2 <- data.frame(second_data,location)
# 데이터 확인
str(join_data_2)
# 결측값 개수 확인
sum(is.na(join_data_2))
# 읍면동 중심위치와 가까운 터미널 거리 구하기
terminal <- read_excel(sprintf("%s/터미널_위키.xlsx",path))
terminal <- terminal[,-c(1,4)]
colnames(terminal) <- c("LON","LAT")
terminal_dist <- c()
for(i in c(1:length(join_data_2$LON))){
data <- c()
data <- gdist(lon.1 = join_data_2$LON[i],
lat.1 = join_data_2$LAT[i],
lon.2 = terminal$LON,
lat.2 = terminal$LAT,
units = "m")
terminal_dist <- c(terminal_dist, min(data))
}
# 읍면동 중심위치와 가까운 기차역 거리 구하기
train_station_data <- read_excel(sprinf("%s/기차역좌표.xlsx",path))
View(join_data_2)
setwd("C:/Users/madda/Desktop/데이터전처리/data")
library(readxl)
library(writexl)
library(dplyr)
library(Imap)
path = "C:/Users/madda/Desktop/데이터전처리/data"
# 교통혼잡,인구수 데이터 변수 추가
trans <- read_excel(sprintf("%s/교통관련데이터.xlsx",path)) %>% as.data.frame()
trans_copy <- trans[,-c(7,9,10)]
trans_copy$행정주소 <- paste(trans_copy$`도/광역시/시`,trans_copy$시군구,trans_copy$읍면동,
rep = " ")
trans_copy <- trans_copy[,-c(1,2,3)]
trans_copy <- trans_copy[,c(5,1:4)]
trans_copy
trans_copy[is.na(trans_copy),]
# 행정주소, 법정주소 연결시키기
relation_data <- read_excel(sptrint("%s/행정법정동코드 연계자료.xlsx",path))
# 행정주소, 법정주소 연결시키기
relation_data <- read_excel(sprintf("%s/행정법정동코드 연계자료.xlsx",path))
copy_relation_data <- relation_data[,-c(8,10,11,12)]
colnames(copy_relation_data) <- copy_relation_data[1,]
copy_relation_data <- copy_relation_data[-1,]
## 읍면동 데이터만 남기기
si_data_list <- grep("시$",copy_relation_data$법정동, value = 1)
gu_data_list <- grep("구$",copy_relation_data$법정동, value = 1)
gun_data_list <- grep("군$",copy_relation_data$법정동, value = 1)
ri_data_list <- grep("리$",copy_relation_data$법정동, value = 1)
do_data_list <- grep("도$",copy_relation_data$법정동, value = 1)
copy_relation_data <- copy_relation_data[!(copy_relation_data$법정동 %in% gu_data_list),]
copy_relation_data <- copy_relation_data[!(copy_relation_data$법정동 %in% gun_data_list),]
copy_relation_data <- copy_relation_data[!(copy_relation_data$법정동 %in% si_data_list),]
copy_relation_data <- copy_relation_data[!(copy_relation_data$법정동 %in% ri_data_list),]
copy_relation_data <- copy_relation_data[!(copy_relation_data$법정동 %in% do_data_list),]
copy_relation_data$법정동코드 <- floor(as.numeric(copy_relation_data$법정동코드)/100)
copy_relation_data$행정주소 <- paste(copy_relation_data$시도,copy_relation_data$시군구,
copy_relation_data$행정구역명, rep ="")
copy_relation_data$법정동명 <- paste(copy_relation_data$시도,copy_relation_data$시군구,
copy_relation_data$법정동, rep ="")
names(copy_relation_data)[8] <- "EMD_CD"
## copy_relation_data 결측값 수정
copy_relation_data$행정구역코드[copy_relation_data$법정동 == "신수동" & copy_relation_data$시군구 == "사천시"] <- 0
copy2_relation_data <- na.omit(copy_relation_data) %>% as.data.frame()
sum(is.na(copy2_relation_data))
write_xlsx(copy2_relation_data,"copy2_relation_data.xlsx")
# trans_copy, copy2_relation_data 합치기
trans_copy$행정주소
trans_copy$행정주소 <- str_trim(trans_copy$행정주소, side = "right")
copy2_relation_data <- read_excel("./copy2_relation_data.xlsx")
library(Imap)
library(stringr)
# trans_copy, copy2_relation_data 합치기
trans_copy$행정주소
trans_copy$행정주소 <- str_trim(trans_copy$행정주소, side = "right")
copy2_relation_data <- read_excel("./copy2_relation_data.xlsx")
# trans_copy, copy2_relation_data 합치기
trans_copy$행정주소
trans_copy$행정주소 <- str_trim(trans_copy$행정주소, side = "right")
# trans_copy, copy2_relation_data 합치기
trans_copy$행정주소
trans_copy$행정주소 <- str_trim(trans_copy$행정주소, side = "right")
copy2_relation_data <- read_excel("./copy2_relation_data.xlsx")
join_data <- left_join(copy2_relation_data,trans_copy, by ="행정주소")
first_data <- join_data[,c(8:14)]
names(first_data)[3] <- "법정동주소"
# 행정주소 겹친거 제거하기
first_data$id <- c(1:length(first_data$EMD_CD))
eraser_rep_data <- first_data[duplicated(first_data$행정주소),]
no_rep_data <- first_data[!(first_data$id %in% eraser_rep_data$id),]
# 관측 안된 값 제거하기
na_data <- no_rep_data[is.na(no_rep_data$승용차),]
second_data <- no_rep_data[!(no_rep_data$id %in% na_data$id),]
# 위경도 추가하기
location <- read.csv(sprintf("%s/center_location.csv",path))
location <- as.data.frame(location)
location <- location[,-1]
colnames(location) <- c("LON","LAT")
location <- location[,c(2,1)]
# location, v2_copy 데이터 합치기
join_data_2 <- data.frame(second_data,location)
sum(is.na(join_data_2))
# 읍면동 중심위치와 가까운 터미널 거리 구하기
terminal <- read_excel(sprintf("%s/터미널_위키.xlsx"))
# 읍면동 중심위치와 가까운 터미널 거리 구하기
terminal <- read_excel(sprintf("%s/터미널_위키.xlsx",path))
terminal <- terminal[,-c(1,4)]
colnames(terminal) <- c("LON","LAT")
terminal_dist <- c()
for(i in c(1:length(join_data_2$LON))){
data <- c()
data <- gdist(lon.1 = join_data_2$LON[i],
lat.1 = join_data_2$LAT[i],
lon.2 = terminal$LON,
lat.2 = terminal$LAT,
units = "m")
terminal_dist <- c(terminal_dist, min(data))
}
# 읍면동 중심위치와 가까운 기차역 거리 구하기
train_station_data <- read_excel(sprintf("%s/기차역좌표.xlsx".path))
# 읍면동 중심위치와 가까운 기차역 거리 구하기
train_station_data <- read_excel(sprintf("%s/기차역좌표.xlsx",path))
train_station_data <- train_station_data[,-1]
train_station_dist <- c()
for(i in c(1:length(join_data_2$LON))){
train_data <- c()
train_data <- gdist(lon.1 = join_data_2$LON[i],
lat.1 = join_data_2$LAT[i],
lon.2 = train_station_data$경도,
lat.2 = train_station_data$위도,
units = "m")
train_station_dist <- c(train_station_dist,min(train_data))
}
# 읍면동 중심위치와 가까운 공항 거리 구하기
airport_data <- read.csv(sprintf("%s/공항위치.csv"))
# 읍면동 중심위치와 가까운 공항 거리 구하기
airport_data <- read.csv(sprintf("%s/공항위치.csv",path))
colnames(airport_data) <- c("공항","위도","경도")
airport_data <- airport_data[,-1]
airport_dist <- c()
for(i in c(1:length(join_data_2$LON))){
airport <- c()
airport <- data <- gdist(lon.1 = join_data_2$LON[i],
lat.1 = join_data_2$LAT[i],
lon.2 = airport_data$경도,
lat.2 = airport_data$위도,
units = "m")
airport_dist <- c(airport_dist,min(airport))
}
# 3개 거리 합치기
distance <- data.frame(terminal_dist,train_station_dist,airport_dist)
colnames(distance) <- c("터미널과의거리","기차역과의거리","공항과의거리")
# 3차 데이터 만들기 : join_data_2와 distance 데이터셋 합치기
third_data <- data.frame(c(0:3269),join_data_2,distance)
third_data <- third_data[,c(1,10:11,3:9,12:14)]
colnames(third_data)[1] <- "new_id"
write_xlsx(third_data,"전처리데이터.xlsx")
