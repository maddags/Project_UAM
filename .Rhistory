# 필요한 패키지
install.packages("igraph")
data <- matrix(a = c(0,2,4,NA,NA,NA,NA),
b = c(2,0,2,NA,NA,NA,NA),
c = c(4,2,5,2,NA,NA,NA))
data <- matrix(a = c(0,2,4,NA,NA,NA,NA),
b = c(2,0,2,NA,NA,NA,NA),
c = c(4,2,5,2,NA,NA,NA))
a = c(0,2,4,NA,NA,NA,NA)
b = c(2,0,2,NA,NA,NA,NA)
c = c(4,2,5,2,NA,NA,NA)
data = matrix(a,b,c)
data
data = matrix(a,b,c, ncol = 3)
matirx(a,b)
matrix(a,b)
data.fram(a,b,c)
data.frame(a,b,c)
data.frame(a,b,c, nrow = 3)
data.frame(a,b,c)
matirx(a,b,c)
matrix(a,b,c)
data
matrix(a,b,c, nrow = 3)
matrix(c(a,b,c), nrow = 3)
matrix(c(a,b,c), nrow = 3, by = T)
matrix(c(a,b,c), nrow = 3, by = F)
matrix(c(a,b,c), nrow = 3, byrow = F )
matrix(c(a,b,c), nrow = 3, byrow = T )
d = c(NA,NA,2,5,2,4,6)
e = c(NA,NA,NA,2,0,2,4)
f = c(NA,NA,NA,4,2,0,2)
g = c(NA,NA,NA,6,4,2,0)
data <- matrix(c(a,b,c,d,e,f,g), nrow = 3, byrow = T )
data
data <- matrix(c(a,b,c,d,e,f,g), nrow = 7, byrow = T )
data
clonames(data) <- c("a","b","c","d","e","f","g")
colnames(data) <- c("a","b","c","d","e","f","g")
rownames(data) <- c("a","b","c","d","e","f","g")
data
data[is.na(data)] <- 0
data
dis <- graph.adjacency(data, weighted = TRUE)
library(igraph)
dis <- graph.adjacency(data, weighted = TRUE)
dis
s.paths <- shortest.paths(data, algorithm = "dijkstra")
s.paths <- shortest.paths(dis, algorithm = "dijkstra")
s.paths
dis
data
s.paths
plot(s.paths)
plot(dis)
install.packages("gcookbook")
# Network 분석/ 시각화 패키지
library(gcookbook)
dist2 <- graph.data.frame(data, directed = TRUE)
dist2
par(mar= c(0,0,0,0))
plot(dist2, layout.fruchterman.reingold.grid,
vertex.size = 8,
edge.arrow.size = 0.5,
vertex.label = NA)
V(dist2)$names
s.paths
dis
data
plot(dis)
######
emp
c = c(4,2,0,2,NA,NA,NA)
data <- matrix(c(a,b,c,d,e,f,g), nrow = 7, byrow = T )
colnames(data) <- c("a","b","c","d","e","f","g")
rownames(data) <- c("a","b","c","d","e","f","g")
data[is.na(data)] <- 0
data
dist1 <- graph.adjacency(data, weighted = TRUE)
dist1
s.paths <- shortest.paths(dis, algorithm = "dijkstra")
data
dis
s.paths
plot(dis)
######
data
######
g <- **graph.data.frame**(data, directed = T)
######
g <- graph.data.frame(data, directed = T)
g
plot(g, layout = layout.fruchterman.reingold,
vertex.size = 8,
edge.arrow.size = 0.5,
edge.arrow.size = 0.1)
######
data
g <- graph.data.frame(data, directed = F)
plot(g, layout = layout.fruchterman.reingold,
vertex.size = 8,
edge.arrow.size = 0.5,
edge.arrow.size = 0.1)
g <- graph.data.frame(data, directed = T)
plot(g, layout = layout.fruchterman.reingold,
vertex.size = 8,
edge.arrow.size = 0.5,
edge.arrow.size = 0.1)
plot(g,
vertex.size = 8,
edge.arrow.size = 0.5,
edge.arrow.size = 0.1)
######
g
######
rm(list = g)
######
rm(list = "g")
######
g
######
print_all(dist1)
library(igraph)
a = c(0,2,4,NA,NA,NA,NA)
b = c(2,0,2,NA,NA,NA,NA)
c = c(4,2,0,2,NA,NA,NA)
d = c(NA,NA,2,5,2,4,6)
e = c(NA,NA,NA,2,0,2,4)
f = c(NA,NA,NA,4,2,0,2)
g = c(NA,NA,NA,6,4,2,0)
data <- matrix(c(a,b,c,d,e,f,g), nrow = 7, byrow = T )
colnames(data) <- c("a","b","c","d","e","f","g")
rownames(data) <- c("a","b","c","d","e","f","g")
data[is.na(data)] <- 0
data
dist1 <- graph.adjacency(data, weighted = TRUE)
dist1
s.paths <- shortest.paths(dis, algorithm = "dijkstra")
data
dis
s.paths
dist1 <- graph.adjacency(data, weighted = TRUE)
dist1
s.paths <- shortest.paths(dis, algorithm = "dijkstra")
s.paths <- shortest.paths(dis, algorithm = "dijkstra")
s.paths <- shortest.paths(dist1, algorithm = "dijkstra")
data
dist1
s.paths
plot(dis)
plot(dist1)
######
#print_all(data) : 루트 볼 때
print_all(dist1)
data
setwd("~/청년 데이터 캠프/project/R/UAM/UAM")
data <- read.table("report.txt")
data <- read.table("report.txt")
data <- read.table("report.txt")
data <- read.table("report.txt", header = T)
data <- read.table("report1.txt", header = T)
data <- read.table("report1.txt")
data <- read.table("report1.txt", header = T, fill = T)
data <- read.table("report1.txt", fill = T)
data <- read.table("report1.txt", fill = T, encoding = T)
data <- read.table("report1.txt", fill = T, encoding = "UTF-8")
data <- read.table("report1.txt", fill = T, encoding = "cp949")
data <- read.table("report1.txt", fill = T, encoding = "cp949")
data
View(data)
data <- read.table("report1.txt", fill = T, encoding = "UTF-8")
data <- read.table("report1.txt", fill = T, encoding = "uft-8")
data
View(data)
data <- read.table("report1.txt", fill = T, encoding = "uft-8")
data
View(data)
data <- read.table("report1.txt", fill = T, encoding = "CP949")
data
View(data)
library(openxlsx)
data <- read.xlsx("2013년 동별 인구이동량.xlsx")
data
View(data)
data <- read.xlsx("2013년 동별 인구이동량.xlsx", header = F)
colnames(data) <- c("기간",
"자치구",
"동",
"총전입(⑦=①+③+⑤)	",
"총전출(⑧=②+④+⑥)	",
"구내이동",
"구내이동",
"구간이동",
"구간이동	시ㆍ도간이동",
"시ㆍ도간이동"
)
data
View(data)
data <- as.data.frame(data)
data <- data[(data$동 == "소계"),]
data
View(data)
data <- read.xlsx("2013년 동별 인구이동량.xlsx", )
data
colnames(data) <- c("기간",
"자치구",
"동",
"총전입(⑦=①+③+⑤)	",
"총전출(⑧=②+④+⑥)	",
"구내이동",
"구내이동",
"구간이동",
"구간이동	시ㆍ도간이동",
"시ㆍ도간이동"
)
data
View(data)
data <- as.data.frame(data)
data <- data[!(data$동 == "소계"),]
View(data)
View(data)
install.packages("geosphere")
### library
library(ggmap)
library(igraph)
setwd("~/청년 데이터 캠프/project/R/UAM/UAM/data")
library(openxlsx)
### 데이터셋
row_data <- read.xlsx("수도권 헬기장 위치 데이터.xlsx")
View(row_data)
lat <- row_data$위도
lat <- row_data$위도
lon <- row_data$경도
install.package("Imap")
install.packages("Imap")
library(Imap)
}
#a = 6378137.0,
#b = 6356752.3124)
}
#a = 6378137.0,
#b = 6356752.3124)
}
#a = 6378137.0,
#b = 6356752.3124)
}
#a = 6378137.0,
#b = 6356752.3124)
}
#a = 6378137.0,
#b = 6356752.3124)
}
for(i in nrow(row_data)) {
dist_list[i] <- gdist(lon.1 = lon[i],
lat.1 = lat[i],
lon.2 = lon,
lat.2 = lat,
units = "km")
#a = 6378137.0,
#b = 6356752.3124)
}
for(i in nrow(row_data)) {
dist_list[[i]] <- gdist(lon.1 = lon[i],
lat.1 = lat[i],
lon.2 = lon,
lat.2 = lat,
units = "km")
#a = 6378137.0,
#b = 6356752.3124)
}
lat <- row_data$위도
lon <- row_data$경도
### 데이터가공 - 거리데이터 만들기
dist_list <- []
for(i in nrow(row_data)) {
dist_list[[i]] <- gdist(lon.1 = lon[i],
lat.1 = lat[i],
lon.2 = lon,
lat.2 = lat,
units = "km")
#a = 6378137.0,
#b = 6356752.3124)
}
for(i in 1:nrow(row_data)) {
dist_list[[i]] <- gdist(lon.1 = lon[i],
lat.1 = lat[i],
lon.2 = lon,
lat.2 = lat,
units = "km")
#a = 6378137.0,
#b = 6356752.3124)
}
lat <- row_data$위도
lon <- row_data$경도
### 데이터가공 - 거리데이터 만들기
dist_list <- []
lat <- row_data$위도
lon <- row_data$경도
### 데이터가공 - 거리데이터 만들기
dist_list <- []
lat <- row_data$위도
lon <- row_data$경도
### 데이터가공 - 거리데이터 만들기
dist_list <- list()
for(i in 1:nrow(row_data)) {
dist_list[[i]] <- gdist(lon.1 = lon[i],
lat.1 = lat[i],
lon.2 = lon,
lat.2 = lat,
units = "km")
#a = 6378137.0,
#b = 6356752.3124)
}
dist_list
dist_data <- sapply(dist_list, as.data.frame)
dist_data
dist_data <- sapply(dist_list, unlist)
dist_data
View(dist_data)
str(dist_data)
structure(dist_data)
summary(dist_data)
colnames(dist_data) <- row_data$위치
colnames(dist_data) <- row_data$위치
dist_data
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
View(dist_data)
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
dist_data
distGeo(12, c(1,2,3))
### library
library(ggmap)
### library
library(geosphere)
distGeo(12, c(1,2,3))
distGeo(12,1)
distGeo(lon,lat)
distGeo(c(row_data$위도[1],row_data$경도[1]), c(row_data$위도,row_data$경도))
distGeo(c(row_data$위도[1],row_data$경도[1]), c(row_data$위도[2],row_data$경도[2]))
c(row_data$위도[1],row_data$경도[1])
c(row_data$위도[1],row_data$경도[1])
distGeo(c(row_data$경도[1],row_data$위도[1]), c(row_data$경도[2],row_data$위위도[2]))
distGeo(c(row_data$경도[1],row_data$위도[1]), c(row_data$경도[2],row_data$위도[2]))
distGeo(c(row_data$경도[1],row_data$위도[1]), c(row_data$경도,row_data$위도))
distGeo(c(row_data$경도[1],row_data$위도[1]), c(row_data$경도[2],row_data$위도[2]))
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
dist_data
View(dist_data)
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
dist_data
lat <- round(row_data$위도,3)
lon <- round(row_data$경도,3)
dist_list <- list()
for(i in 1:nrow(row_data)) {
dist_list[[i]] <- gdist(lon.1 = lon[i],
lat.1 = lat[i],
lon.2 = lon,
lat.2 = lat,
units = "km")
#a = 6378137.0,
#b = 6356752.3124)
}
dist_list
dist_data <- sapply(dist_list, unlist)
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
dist_data
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
dist_data
lat <- row_data$위도
lon <- row_data$경도
### 데이터가공 - 거리데이터 만들기
dist_list <- list()
for(i in 1:nrow(row_data)) {
dist_list[[i]] <- gdist(lon.1 = lon[i],
lat.1 = lat[i],
lon.2 = lon,
lat.2 = lat,
units = "km")
#a = 6378137.0,
#b = 6356752.3124)
}
lat <- row_data$위도
lon <- row_data$경도
### 데이터가공 - 거리데이터 만들기
dist_list <- list()
lat <- row_data$위도
lon <- row_data$경도
### 데이터가공 - 거리데이터 만들기
dist_list <- list()
for(i in 1:nrow(row_data)) {
dist_list[[i]] <- gdist(lon.1 = lon[i],
lat.1 = lat[i],
lon.2 = lon,
lat.2 = lat,
units = "km")
#a = 6378137.0,
#b = 6356752.3124)
}
dist_list
dist_data <- sapply(dist_list, unlist)
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
dist_data
dist_data <- round(sapply(dist_list, unlist),3)
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
dist_data
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
dist_data
# 유클리드 거리 사용 x -> 지구는 "구"여서
# 유클리드 거리 사용 x -> 지구는 "구"여서
# distGeo() : 두 지점 사이의 최단거리 계산하는 함수
# 유클리드 거리 사용 x -> 지구는 "구"여서
# distGeo() : 두 지점 사이의 최단거리 계산하는 함수
# centroid() : 다중 지점의 중심섬을 산출하는 함수
View(dist_data)
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
View(dist_data)
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
### 다익스트라 거리공식
min_dist_data <- graph.adjacency(dist_data, weighted =  F)
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
### 다익스트라 거리공식
min_dist_data <- graph.adjacency(dist_data)
min_dist_data
View(dist_data)
min_dist_data <- shortest.paths(min_dist_data, algorithm = "dijkstra")
min_dist_data
View(min_dist_data)
plot(min_dist_data)
colnames(dist_data) <- row_data$위치
rownames(dist_data) <- row_data$위치
### 다익스트라 거리공식
min_dist_data <- graph.adjacency(dist_data)
plot(min_dist_data)
library(ape)
install.packages(ape)
install.packages("ape")
library(ape)
map_data <- ape::mst(dist_data)
par(mar = c(1,1,1,1))
plot(min_dist_data)
dijkstar_dist_data <- shortest.paths(min_dist_data, algorithm = "dijkstra")
dijkstar_dist_data
View(dist_data)
install.packages("writexl")
library(writexl)
getwd()
writexl(dist_data,"./헬기장지평거리.xlsx")
writexl(dist_data, path ="./헬기장지평거리.xlsx")
write_xlsx(dist_data, path ="./헬기장지평거리.xlsx")
dist_data
class(dist_data)
dist_data_df <- as.data.frame(dist_data)
write_xlsx(dist_data, path ="./헬기장지평거리.xlsx")
write_xlsx(dist_data_df, path ="./헬기장지평거리.xlsx")
dijkstar_dist_data
wirte_xlsx(dijkstar_dist_data)
write_xlsx(dijkstar_dist_data, path ="./헬기장다익스트라거리리")
class(dijkstar_dist_data)
dijkstar_dist_data_df <-as.data.frame(dijkstar_dist_data)
write_xlsx(dijkstar_dist_data, path ="./헬기장다익스트라거리")
write_xlsx(dijkstar_dist_data_df, path ="./헬기장다익스트라거리")
write_xlsx(dijkstar_dist_data_df, path ="./헬기장다익스트라거리.xlsx")
colnames(dist_data) <- c(1:24)
rownames(dist_data) <- c(1:24)
### 다익스트라 거리공식
min_dist_data <- graph.adjacency(dist_data)
plot(min_dist_data)
dijkstar_dist_data <- shortest.paths(min_dist_data, algorithm = "dijkstra")
dijkstar_dist_data
#colnames(dist_data) <- row_data$위치
#rownames(dist_data) <- row_data$위치
dist_data
View(dist_data)
dist_data <- round(sapply(dist_list, unlist),0)
colnames(dist_data) <- c(1:24)
rownames(dist_data) <- c(1:24)
#colnames(dist_data) <- row_data$위치
#rownames(dist_data) <- row_data$위치
dist_data
View(dist_data)
### 다익스트라 거리공식
min_dist_data <- graph.adjacency(dist_data)
dijkstar_dist_data <- shortest.paths(min_dist_data, algorithm = "dijkstra")
dijkstar_dist_data
dist_data <- sapply(dist_list, unlist)
colnames(dist_data) <- c(1:24)
rownames(dist_data) <- c(1:24)
#colnames(dist_data) <- row_data$위치
#rownames(dist_data) <- row_data$위치
dist_data
### 다익스트라 거리공식
min_dist_data <- graph.adjacency(dist_data)
dijkstar_dist_data <- shortest.paths(min_dist_data, algorithm = "dijkstra")
dijkstar_dist_data
